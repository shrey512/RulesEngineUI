@*
    // Copyright (c) Alex Reich.
    // Licensed under the CC BY 4.0 License.
*@
@using RulesEngineEditor.Models
@using RulesEngineEditor.Components
@inject NavigationManager NavigationManager
@inject RulesEngineEditor.Services.WorkflowService WorkflowService
@inject RulesEngineEditor.Services.RuleService RuleService

@implements IDisposable

<sp_grid_tabs>
    <div>
        <button class="reeditor_menubutton @IsPressed(ShowWorkflows, "menubutton_depressed")" @onclick="(() => ShowWorkflows = true)">Workflows</button>
    </div><div>
        <button class="reeditor_menubutton @IsPressed(!ShowWorkflows, "menubutton_depressed")" @onclick="(() => ShowWorkflows = false)">Input Rule Parameters</button>
    </div>
</sp_grid_tabs>
<br />


@functions {

    // List<ClientModel> clientModels = new List<ClientModel>()
    // {
    //     new ClientModel {Id=1,Client="ABC",WorkflowName="Eligibility"},
    //     new ClientModel {Id=1,Client="XYZ",WorkflowName="Discount"},
    // };

    public string IsPressed(bool state, string suffix)
    {
        return state ? "reeditor_" + suffix : "";
    }

    public List<WorkflowData> GetWorkflows()
    {
        List<WorkflowData> workflows = new List<WorkflowData>();
        WorkflowData wd = new WorkflowData();
        wd.WorkflowName = "ALL";
        workflows.Add(wd);

        workflows.AddRange(WorkflowService.Workflows.OrderBy(o => o.WorkflowName));
        return workflows;
    }


    public List<RuleData> GetRules(string workflowName, string clientname)
    {
        List<RuleData> filteredRules = new List<RuleData>();
        List<WorkflowData> workflows = GetWorkflows();
        foreach (var workflow in workflows)
        {
            if ((workflowName == "ALL" || workflow.WorkflowName == workflowName) && (clientname == "ALL" || workflow.ClientName == clientname))
            {
                if (workflow.Rules != null)
                {
                    filteredRules.AddRange(workflow.Rules);
                }            
            }
        }
        return filteredRules;
    }

    public List<string> GetClients()
    {
        //List<WorkflowData> workflow = new List<WorkflowData>();
        List<string> clientNames = new List<string>();

        clientNames.Add("ALL");
        // foreach (var client in workflow)
        // {
        //     clientNames.Add(client.ClientName);
        // }
        var uniqueClientNames = GetWorkflows().Select(w => w.ClientName).Distinct();
        clientNames.AddRange(uniqueClientNames);
        return clientNames;
    }


    //filter client

    void OnClientChange(ChangeEventArgs e)
    {
        CurrentClient = e.Value?.ToString();
        CurrentWorkflowName = null;
        CurrentRuleName = null;
    }

    List<WorkflowData> GetFilteredWorkflows()
    {
        if(CurrentClient == "ALL")
        {
            return GetWorkflows();
        }
        else
        {
            return GetWorkflows().Where(w => w.ClientName == CurrentClient).ToList();
            // var clientfilteredworkflows = new List<WorkflowData>();
            // foreach(var workflow in GetWorkflows())
            // {
            //     if (clientModels.Any(cm => cm.WorkflowName == workflow.WorkflowName && cm.Client == CurrentClient))
            //     {
            //         clientfilteredworkflows.Add(workflow);
            //     }
            // }
            // return clientfilteredworkflows;
        }
    }


    // List<RuleData> GetFilteredRules(string workflowName)
    // {
    //     if(workflowName == null || workflowName == "ALL")
    //     {
    //         return GetRules("ALL").ToList();
    //     }
    //     else
    //     {
    //         var workflow = GetWorkflows().FirstOrDefault(w => w.WorkflowName == workflowName && w.ClientName == CurrentClient);
    //         if(workflow != null && workflow.Rules != null)
    //         {
    //             return workflow.Rules.ToList();
    //         }
    //         else
    //         {
    //             return new List<RuleData>();
    //         }
    //     }
    // }



}
<div hidden="@(!ShowWorkflows)">
    <div style="display: flex;">
        <EditForm Model="currentclient" class="reeditor_button" style="width:200px">
            <label for="currentClient" style="width:200px; margin-top: 7px">Select Client:</label>
            <InputSelect @bind-Value="CurrentClient" class="reeditor_button" title="Current Client" @onchange="OnClientChange">
                @foreach (var ct in GetClients())
                {
                    <option value="@ct">@ct</option>
                }
            </InputSelect>
        </EditForm>

        <EditForm Model="currentWorkflow" class="reeditor_button" style="margin-right: 50px; margin-left: 50px;">
            <InputSelect @bind-Value="CurrentWorkflowName" class="reeditor_button" title="Current Workflow">
                @foreach (var wf in GetFilteredWorkflows())
                {
                    <option value="@wf.WorkflowName">@wf.WorkflowName</option>
                }
            </InputSelect>

            @if (!string.IsNullOrEmpty(CurrentWorkflowName))
            {
                <div>
                    <InputSelect @bind-Value="CurrentRuleName" class="reeditor_button" title="Current Rule">
                        @if(CurrentWorkflowName == "ALL")
                        {
                            <option value="">ALL</option>
                        }
                        @foreach (var rl in GetRules(CurrentWorkflowName,CurrentClient))
                        {
                            <option value="@rl.RuleName">@rl.RuleName</option>
                        }
                    </InputSelect>
                </div>
            }
        </EditForm>
    </div>
    @* <EditForm Model="currentRule" class="reeditor_button">
        <InputSelect @bind-Value="CurrentRuleName" class="reeditor_button" title="Current Rule">
            @foreach (var rl in GetRules())
            {
                <option value="@rl">@rl</option>
            }
        </InputSelect>
    </EditForm> *@
    <br />

    @if (IsButtonEnabled("NewWorkflows"))
    {
        <button title="New Workflows" class="reeditor_button" @onclick="NewWorkflows">Reset</button>

        <span>&nbsp;</span>
    }
    @if (IsButtonEnabled("DownloadWorkflows"))
    {
        <a title="Download Workflows" class="reeditor_button" @attributes="@DownloadAttributes">Download</a>

        <span>&nbsp;</span>
    }
    @if (IsButtonEnabled("ImportWorkflows"))
    {
        <div class="reeditor_button"><InputFile title="Import Workflows" OnChange="@ImportWorkflows" />Import</div>

        <span>&nbsp;</span>
    }
    @if (IsButtonEnabled("AddWorkflow"))
    {
        <button title="Add Workflow" class="reeditor_button" @onclick="AddWorkflow">Add Workflow</button>

        <span>&nbsp;</span>
    }
    @if (IsButtonEnabled("AddExistWorkflow"))
    {
        <!-- Button to trigger the modal -->
        <button title="Add Existing Workflow" class="reeditor_button" style="width: 190px" @onclick="ShowAddWorkflowModal">Add Existing Workflow</button>

        <span>&nbsp;</span>
    }
    

    @if (IsButtonEnabled("SaveWorkflow"))
    {
        <button title="Save Workflow" class="reeditor_button" @onclick="SaveWorkflow">Save</button>

        <span>&nbsp;</span>
    }
    <button class="reeditor_button @IsPressed(sort_wf, "button_depressed")" @onclick="(() => sort_wf = !sort_wf)">Arrange</button>
    <span>&nbsp;</span>

    <!-- Modal for adding existing workflow -->
    @if (showAddWorkflowModal)
    {
        <div>
            <div class="modal-content">
                <span class="close" @onclick="CloseModal">&times;</span>
                <h2>Add Existing Workflow</h2>
                <div>
                    <label for="clientDropdown">Select Client:</label>
                    <select id="clientDropdown" @bind="selectedClient">
                        @foreach (var workflowdata in WorkflowDatas)
                        {
                            <option value="@workflowdata.ClientName">@workflowdata.ClientName</option>
                        }
                    </select>
                </div>
                <div>
                    <label for="workflowDropdown">Select Workflow:</label>
                    <select id="workflowDropdown" @bind="selectedWorkflow">
                        @foreach (var workflowdata in WorkflowDatas)
                        {
                            <option value="@workflowdata.WorkflowName">@workflowdata.WorkflowName</option>
                        }
                    </select>
                </div>
                <button @onclick="AddExistingWorkflow">Add</button>
            </div>
        </div>
    }
</div>

@if (WorkflowService.Workflows.Count > 0)
{
    <div class="sp_grid_main" hidden="@(!ShowWorkflows)">
        <div>
            @if (sort_wf)
            {
                <Dropzone TItem="WorkflowData" OnItemDrop="@((i)=>WorkflowDragEnd(i))" Items="@(CurrentWorkflowName == null || CurrentWorkflowName == "ALL" ? WorkflowService.Workflows : WorkflowService.Workflows.Where(w => w.WorkflowName == CurrentWorkflowName).ToList())" Class="reeditor_dragdrop">
                    <WorkflowEditor workFlow="context" WorkflowDelete="DeleteWorkflow" />
                    <div class="sp_grid_workflow_children">
                        <h5>Rules</h5>
                        <button class="reeditor_button" @onclick="(() => WorkflowService.NewRule(context))">New</button>

                        <Rules rules=context.Rules RulesChanged="WorkflowUpdate" />
                        <h5>Global Params</h5>
                        <div>
                            <button class="reeditor_button" @onclick="(e => { NewGlobalParam(context); })">New</button>
                        </div>
                        <ScopedParams scopedParams=context.GlobalParams ScopedParamsChanged="WorkflowUpdate" />
                    </div>
                </Dropzone>
                <Dropzone TItem="WorkflowData" OnItemDrop="@((i)=>WorkflowDragEnd(i))" Items="@(CurrentWorkflowName == null || CurrentWorkflowName == "ALL" ? WorkflowService.Workflows : WorkflowService.Workflows.Where(w => w.WorkflowName == CurrentWorkflowName).ToList())" Class="reeditor_dragdrop">
                    
                </Dropzone>
            }
            else
            {
                @foreach (WorkflowData context in (CurrentWorkflowName == null || CurrentWorkflowName == "ALL" ? WorkflowService.Workflows : WorkflowService.Workflows.Where(w => w.WorkflowName == CurrentWorkflowName).ToList()))
                {
                    <WorkflowEditor workFlow="context" WorkflowDelete="DeleteWorkflow" />
                    <div class="sp_grid_workflow_children">
                        <h5>Rules</h5>
                        <button class="reeditor_button" @onclick="(() => WorkflowService.NewRule(context))">New</button>

                        <Rules rules=context.Rules RulesChanged="WorkflowUpdate" />
                        <h5>Global Params</h5>
                        <div>
                            <button class="reeditor_button" @onclick="(e => { NewGlobalParam(context); })">New</button>
                        </div>
                        <ScopedParams scopedParams=context.GlobalParams ScopedParamsChanged="WorkflowUpdate" />
                    </div>
                }
            }
        </div>
        <div>
            <span class="JSONErrors">@workflowJSONErrors</span>
            <textarea @bind="WorkflowsJSON" class="jsonTextArea" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" readonly></textarea>
        </div>
    </div>
    <div hidden="@(ShowWorkflows)">
        @if (IsButtonEnabled("NewInputs"))
        {
            <button title="New Input" class="reeditor_button" @onclick="NewInputs">New</button>

            <span>&nbsp;</span>
        }
        @if (IsButtonEnabled("DownloadInputs"))
        {
            <a title="Download Inputs" class="reeditor_button" @attributes="@DownloadInputAttributes">Download</a>

            <span>&nbsp;</span>
        }
        @if (IsButtonEnabled("ImportInputs"))
        {
            <div class="reeditor_button"><InputFile title="Import Inputs" OnChange="@ImportInputs" />Import</div>

            <span>&nbsp;</span>
        }
        <button class="reeditor_button @IsPressed(sort_ip, "button_depressed")" @onclick="(() => sort_ip = !sort_ip)">Arrange</button>
        <span>&nbsp;</span>
        @if (IsButtonEnabled("AddInput"))
        {
            <button title="Add Input" class="reeditor_button" @onclick="AddInput">Add</button>
        }

        <div class="sp_grid_main" hidden="@(!WorkflowService.Inputs.Any())">
            <div>
                @if (sort_ip)
                {
                    <Dropzone Items="WorkflowService.Inputs" Class="reeditor_dragdrop">
                        <div class="rules_arrange">
                            <InputEditor Input=@context InputDeleted="DeleteInput" />
                        </div>
                    </Dropzone>
                }
                else
                {
                    @foreach (InputRuleParameter context in WorkflowService.Inputs)
                    {
                        <div class="rules">
                            <InputEditor Input=@context InputDeleted="DeleteInput" />
                        </div>
                    }
                }
            </div>
            <div>
                <span class="JSONErrors">@inputJSONErrors</span>
                <textarea @bind="InputJSON" class="jsonTextArea" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" readonly />
            </div>
        </div>
    </div>
}
else
{
    <span class="JSONErrors">@workflowJSONErrors</span>
}
